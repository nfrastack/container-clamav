#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="clamav"

### Image Routines
if var_false "${ENABLE_CLAMD}" ; then
	print_info "Disabling ClamD from running - This image is only suitable for manual scanning in this state"
	service-stop 10-clamd
fi

if var_false "${ENABLE_DEFINITIONS_UPDATE}" ; then
	print_info "Disabling Definitions from being automatically updated"
	service-stop 20-freshclam
fi

create_zabbix clamav

### Setup Persistent Storage
#### Definitions
if [ ! -d "${DEFINITIONS_LOCATION}" ]; then
	print_debug "Detected First Time Install"
	mkdir -p "${DEFINITIONS_LOCATION}"
fi
rm -rf /var/lib/clamav
ln -sf "${DEFINITIONS_LOCATION}" /var/lib/clamav
chown -R clamav:clamav "${DEFINITIONS_LOCATION}"

#### Logging
if var_true "${ENABLE_LOG_CLAMD}" || var_true "${ENABLE_LOG_FRESHCLAM}" ; then
	print_notice "Configuring Logging"
	if [ ! -d "${LOG_PATH}" ]; then
		print_debug "Setting up Logging Directory"
    	mkdir -p "${LOG_PATH}"
	fi
	if var_true "${ENABLE_LOG_CLAMD}" ; then
    	create_logrotate clamav ${LOG_PATH}/${LOG_FILE_CLAMD} clamav clamav clamav
		touch ${LOG_PATH}/${LOG_FILE_CLAMD}
	fi

	if var_true "${ENABLE_LOG_CLAMD}" ; then
		create_logrotate freshclam ${LOG_PATH}/${LOG_FILE_FRESHCLAM} freshclam clamav clamav
		touch ${LOG_PATH}/${LOG_FILE_FRESHCLAM}
	fi

	chown -R clamav:clamav "${LOG_PATH}"
fi

#### Configuration
if [ ! -f "${CONFIG_LOCATION}"/"${CLAMD_CONFIG_FILE}" ] || [ ! -f "${CONFIG_LOCATION}"/"${FRESHCLAM_CONFIG_FILE}" ] ; then
	mkdir -p "${CONFIG_LOCATION}"
	print_info "Setting up Configuration for the first time"
	SETUP_MODE=auto
fi

#### Socket Configuration
if [ ! -d $(dirname "${CLAMD_LOCAL_SOCKET}") ] ; then
	mkdir -p $(dirname "${CLAMD_LOCAL_SOCKET}")
	chown -R clamav:clamav $(dirname "${CLAMD_LOCAL_SOCKET}")
fi

#### Temp Files Configuration
if [ ! -d "${CLAMD_TEMP_LOCATION}" ] ; then
	mkdir -p "${CLAMD_TEMP_LOCATION}"
	chown -R clamav:clamav "${CLAMD_TEMP_LOCATION}"
fi

if [ "${SETUP_TYPE,,}" = "auto" ]; then
	truefalse_yesno DISABLE_CERT_CHECK
	truefalse_yesno ENABLE_ALGORITHMIC_DETECTION
	truefalse_yesno ENABLE_BYTECODE
	truefalse_yesno ENABLE_DETECT_PUA
	truefalse_yesno ENABLE_PHISHING_SCAN_URLS
	truefalse_yesno ENABLE_PHISHING_SIGNATURES
    truefalse_yesno ENABLE_SCAN_ARCHIVE
	truefalse_yesno ENABLE_SCAN_ELF
	truefalse_yesno ENABLE_SCAN_HTML
	truefalse_yesno ENABLE_SCAN_MAIL
	truefalse_yesno ENABLE_SCAN_OLE2
	truefalse_yesno ENABLE_SCAN_PDF
	truefalse_yesno ENABLE_SCAN_PE
	truefalse_yesno ENABLE_SCAN_SWF
	exclude_pua_array=$(echo "$EXCLUDE_PUA" | tr "," "\n")
		for pua in $exclude_pua_array
		do
    		excluded_pua=${excluded_pua}$(cat <<EOF

ExcludePUA ${pua}
EOF
		)
	done

	include_pua_array=$(echo "$INCLUDE_PUA" | tr "," "\n")
		for pua in $include_pua_array
		do
    		included_pua=${included_pua}$(cat <<EOF

IncludePUA ${pua}
EOF
		)
	done

    print_notice "Generating Configuration for Clam Antivirus"
	cat <<EOF > "${CONFIG_LOCATION}"/"${CLAMD_CONFIG_FILE}"
## Custom Generated Clam Antivirus Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

###############
# General
###############

User clamav
Foreground yes
LocalSocket ${CLAMD_LOCAL_SOCKET}
PidFile $(dirname "${CLAMD_LOCAL_SOCKET}")/clamd.pid
TCPSocket ${LISTEN_PORT}
DatabaseDirectory ${DEFINITIONS_LOCATION}
TemporaryDirectory ${CLAMD_TEMP_LOCATION}
MaxThreads ${MAX_THREADS}
LogFile ${LOG_PATH}/${LOG_FILE_CLAMD}
LogFileUnlock yes
LogTime yes
ConcurrentDatabaseReload ${CONCURRENT_DATABASE_RELOAD}
${conf_log_verbose}
${conf_log_debug}

###############
# Results
###############

DetectPUA ${ENABLE_DETECT_PUA}
${excluded_pua}
${included_pua}
AlgorithmicDetection ${ENABLE_ALGORITHMIC_DETECTION}
Bytecode ${ENABLE_BYTECODE}

###############
# Scan
###############

DisableCertCheck ${DISABLE_CERT_CHECK}
PhishingScanURLs ${ENABLE_PHISHING_SCAN_URLS}
PhishingSignatures ${ENABLE_PHISHING_SIGNATURES}
ScanArchive ${ENABLE_SCAN_ARCHIVE}
ScanELF ${ENABLE_SCAN_ELF}
ScanHTML ${ENABLE_SCAN_HTML}
ScanMail ${ENABLE_SCAN_MAIL}
ScanOLE2 ${ENABLE_SCAN_OLE2}
ScanPDF ${ENABLE_SCAN_PDF}
ScanPE ${ENABLE_SCAN_PE}
ScanSWF ${ENABLE_SCAN_SWF}

###############
# Scan Options
###############

MaxScanSize ${MAX_SCAN_SIZE}
MaxFileSize ${MAX_FILE_SIZE}
MaxRecursion ${MAX_RECURSION}
MaxFiles ${MAX_FILES}
MaxEmbeddedPE ${MAX_EMBEDDEDPE}
MaxHTMLNormalize ${MAX_HTMLNORMALIZE}
MaxHTMLNoTags ${MAX_HTMLNOTAGS}
MaxScriptNormalize ${MAX_SCRIPTNORMALIZE}
MaxZipTypeRcg ${MAX_ZIPTYPERCG}
MaxPartitions ${MAX_PARTITIONS}
MaxIconsPE ${MAX_ICONSPE}
MaxRecHWP3 ${MAX_RECHWP3}
PCREMatchLimit ${PCRE_MATCH_LIMIT}
PCRERecMatchLimit ${PCRE_RECMATCH_LIMIT}
PCREMaxFileSize ${PCRE_MAX_FILE_SIZE}
StreamMaxLength ${STREAM_MAX_LENGTH}

###############
# Alert Options
###############
AlertEncryptedArchive ${ENABLE_ALERT_ENCRYPTED_ARCHIVE}
AlertEncryptedDoc ${ENABLE_ALERT_ENCRYPTED_DOC}
AlertOLE2Macros ${ENABLE_ALERT_OLE2_MACROS}
AlertExceedsMax ${ENABLE_ALERT_EXCEEDS_MAX}
EOF

    print_notice "Generating Configuration for Definitions Updater"
    if [ -n "${FRESHCLAM_DATABASES}" ] ; then
        custom_db=$(echo "${FRESHCLAM_DATABASES}" | tr "," "\n" | sed -e 's/^/DatabaseCustomURL /')
    fi

    cat <<EOF > "${CONFIG_LOCATION}"/"${FRESHCLAM_CONFIG_FILE}"
## Custom Generated Freshclam Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)
DatabaseOwner clamav
PidFile $(dirname "${CLAMD_LOCAL_SOCKET}")/freshclam.pid
DatabaseDirectory ${DEFINITIONS_LOCATION}
DatabaseMirror database.clamav.net
ScriptedUpdates yes
LogTime yes
${custom_db}
EOF
else
	print_notice "Manual Configuration Mode selected"
fi
chown -R clamav:clamav "${CONFIG_LOCATION}"

### Check for Definitions
if [ ! -f "${DEFINITIONS_LOCATION}"/main.cvd  ]; then
    print_warn "No Virus Definitions Found! Downloading.."
	silent freshclam -F --config-file="${CONFIG_LOCATION}"/"${FRESHCLAM_CONFIG_FILE}" ${log_verbose} ${freshclam_log} ${debug_arg}
fi

echo "alias clamscan='clamscan -d ${DEFINITIONS_LOCATION}'" > /root/.bashrc

print_info "Container Initialization Complete"

cat <<EOF

*********************************************************************************
*                                                                               *
*                    END OF LIFE NOTICE AUGUST 14, 2025                         *
*                               tiredofit/clamav                                *
*                                                                               *
* This image is no longer maintained as of and will not receive updates.        *
*                                                                               *
* A successor image is available at:                                            *
*                                                                               *
* Repository | Documentation:                                                   *
*   - ps://github.com/nfrastack/container-clamav                                *
*                                                                               *
* Image Registries:                                                             *
*   - https://hub.docker.com/r/nfrastack/clamav                                 *
*   - https://github.com/nfrastack/container-base/pkgs/container/container-base *
*                                                                               *
* Please visit https://nfrastack.com for more information.                      *
*                                                                               *
*********************************************************************************

EOF

sleep 15

liftoff
